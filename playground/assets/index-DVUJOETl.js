import{L as d}from"./__vite-browser-external-D80GqXp3.js";import{R as b}from"./remoteFile-Bm2xbUQM.js";import{b as s}from"./index-D1-7ym7j.js";import"./_commonjsHelpers-C932wzq6.js";import"./index-ClfaVKLN.js";function a(n){const r=new FileReader;return new Promise((o,e)=>{r.onerror=()=>{r.abort(),e(new Error("problem reading blob"))},r.onabort=()=>{e(new Error("blob reading was aborted"))},r.onload=()=>{r.result&&typeof r.result!="string"?o(r.result):e(new Error("unknown error reading blob"))},r.readAsArrayBuffer(n)})}function c(n){const r=new FileReader;return new Promise((o,e)=>{r.onerror=()=>{r.abort(),e(new Error("problem reading blob"))},r.onabort=()=>{e(new Error("blob reading was aborted"))},r.onload=()=>{r.result&&typeof r.result=="string"?o(r.result):e(new Error("unknown error reading blob"))},r.readAsText(n)})}class R{constructor(r){this.blob=r,this.size=r.size}async read(r,o=0,e,u=0){if(!e)return{bytesRead:0,buffer:r};const t=u,l=t+e,f=await a(this.blob.slice(t,l)),i=s.Buffer.from(f);return{bytesRead:i.copy(r,o),buffer:i}}async readFile(r){const o=typeof r=="string"?r:r==null?void 0:r.encoding;if(o==="utf8")return c(this.blob);if(o)throw new Error(`unsupported encoding: ${o}`);const e=await a(this.blob);return s.Buffer.from(e)}async stat(){return{size:this.size}}async close(){}}function w(n,r={}){return new b(n,r)}function h(n,r,o,e={}){if(o!==void 0)return o;if(n!==void 0)return w(n,e);if(r!==void 0)return new d(r,e);throw new Error("no url, path, or filehandle provided, cannot open")}export{R as BlobFile,d as LocalFile,b as RemoteFile,w as fromUrl,h as open};
