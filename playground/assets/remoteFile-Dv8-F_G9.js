import{b as d}from"./index-BHN4ZNUB.js";class b{async getBufferFromResponse(e){const t=await e.arrayBuffer();return d.Buffer.from(t)}constructor(e,t={}){this.baseOverrides={},this.url=e;const r=t.fetch||globalThis.fetch.bind(globalThis);if(!r)throw new TypeError("no fetch function supplied, and none found in global environment");t.overrides&&(this.baseOverrides=t.overrides),this.fetchImplementation=r}async fetch(e,t){let r;try{r=await this.fetchImplementation(e,t)}catch(s){if(`${s}`.includes("Failed to fetch"))console.warn(`generic-filehandle: refetching ${e} to attempt to work around chrome CORS header caching bug`),r=await this.fetchImplementation(e,{...t,cache:"reload"});else throw s}return r}async read(e,t=0,r,s=0,h={}){const{headers:n={},signal:c,overrides:a={}}=h;r<1/0?n.range=`bytes=${s}-${s+r}`:r===1/0&&s!==0&&(n.range=`bytes=${s}-`);const l={...this.baseOverrides,...a,headers:{...n,...a.headers,...this.baseOverrides.headers},method:"GET",redirect:"follow",mode:"cors",signal:c},i=await this.fetch(this.url,l);if(!i.ok)throw new Error(`HTTP ${i.status} ${i.statusText} ${this.url}`);if(i.status===200&&s===0||i.status===206){const f=await this.getBufferFromResponse(i),u=f.copy(e,t,0,Math.min(r,f.length)),w=i.headers.get("content-range"),o=/\/(\d+)$/.exec(w||"");return o!=null&&o[1]&&(this._stat={size:parseInt(o[1],10)}),{bytesRead:u,buffer:e}}throw i.status===200?new Error("${this.url} fetch returned status 200, expected 206"):new Error(`HTTP ${i.status} fetching ${this.url}`)}async readFile(e={}){let t,r;typeof e=="string"?(t=e,r={}):(t=e.encoding,r=e,delete r.encoding);const{headers:s={},signal:h,overrides:n={}}=r,c={headers:s,method:"GET",redirect:"follow",mode:"cors",signal:h,...this.baseOverrides,...n},a=await this.fetch(this.url,c);if(!a)throw new Error("generic-filehandle failed to fetch");if(a.status!==200)throw Object.assign(new Error(`HTTP ${a.status} fetching ${this.url}`),{status:a.status});if(t==="utf8")return a.text();if(t)throw new Error(`unsupported encoding: ${t}`);return this.getBufferFromResponse(a)}async stat(){if(!this._stat){const e=d.Buffer.allocUnsafe(10);if(await this.read(e,0,10,0),!this._stat)throw new Error(`unable to determine size of file at ${this.url}`)}return this._stat}async close(){}}export{b as R};
