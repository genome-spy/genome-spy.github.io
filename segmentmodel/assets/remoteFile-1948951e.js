import{b as d}from"./index-462333f7.js";class b{async getBufferFromResponse(e){if(typeof e.buffer=="function")return e.buffer();if(typeof e.arrayBuffer=="function"){const t=await e.arrayBuffer();return d.Buffer.from(t)}else throw new TypeError("invalid HTTP response object, has no buffer method, and no arrayBuffer method")}constructor(e,t={}){this.baseOverrides={},this.url=e;const r=t.fetch||globalThis.fetch.bind(globalThis);if(!r)throw new TypeError("no fetch function supplied, and none found in global environment");t.overrides&&(this.baseOverrides=t.overrides),this.fetchImplementation=r}async fetch(e,t){let r;try{r=await this.fetchImplementation(e,t)}catch(s){if(`${s}`.includes("Failed to fetch"))console.warn(`generic-filehandle: refetching ${e} to attempt to work around chrome CORS header caching bug`),r=await this.fetchImplementation(e,{...t,cache:"reload"});else throw s}return r}async read(e,t=0,r,s=0,o={}){const{headers:i={},signal:f,overrides:a={}}=o;r<1/0?i.range=`bytes=${s}-${s+r}`:r===1/0&&s!==0&&(i.range=`bytes=${s}-`);const u={...this.baseOverrides,...a,headers:{...i,...a.headers,...this.baseOverrides.headers},method:"GET",redirect:"follow",mode:"cors",signal:f},n=await this.fetch(this.url,u);if(!n.ok)throw new Error(`HTTP ${n.status} ${n.statusText} ${this.url}`);if(n.status===200&&s===0||n.status===206){const c=await this.getBufferFromResponse(n),l=c.copy(e,t,0,Math.min(r,c.length)),w=n.headers.get("content-range"),h=/\/(\d+)$/.exec(w||"");return h&&h[1]&&(this._stat={size:parseInt(h[1],10)}),{bytesRead:l,buffer:e}}throw n.status===200?new Error("${this.url} fetch returned status 200, expected 206"):new Error(`HTTP ${n.status} fetching ${this.url}`)}async readFile(e={}){let t,r;typeof e=="string"?(t=e,r={}):(t=e.encoding,r=e,delete r.encoding);const{headers:s={},signal:o,overrides:i={}}=r,f={headers:s,method:"GET",redirect:"follow",mode:"cors",signal:o,...this.baseOverrides,...i},a=await this.fetch(this.url,f);if(!a)throw new Error("generic-filehandle failed to fetch");if(a.status!==200)throw Object.assign(new Error(`HTTP ${a.status} fetching ${this.url}`),{status:a.status});if(t==="utf8")return a.text();if(t)throw new Error(`unsupported encoding: ${t}`);return this.getBufferFromResponse(a)}async stat(){if(!this._stat){const e=d.Buffer.allocUnsafe(10);if(await this.read(e,0,10,0),!this._stat)throw new Error(`unable to determine size of file at ${this.url}`)}return this._stat}async close(){}}export{b as R};
